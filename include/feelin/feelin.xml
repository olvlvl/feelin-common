<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE library SYSTEM "library.dtd">
<!--

	This file should not be used anymore... It's only used by idltool to generate a library structure.
	If the function list or protos does change, we would certainly prefere changing the ganarated
	files directly, not this one. And don't forget to change the version number of the interface !

	But it might be wise to keep it up to date anyway...

	But anyway, let's keep it in the source tree (just in case) !

-->
<library name="feelin" basename="FeelinBase">
	<include>feelin/types.h</include>
	<interface name="main" version="1.0" struct="FeelinIFace" prefix="_Feelin_" asmprefix="IFeelin" global="IFeelin">
		<method name="Obtain" result="ULONG"/>
		<method name="Release" result="ULONG"/>
		<method name="Expunge" result="void" status="unimplemented"/>
		<method name="Clone" result="struct Interface *" status="unimplemented"/>
		<method name="F_CreatePoolA" result="APTR">
			<arg name="ItemSize" type="uint32"/>
			<arg name="Tagl" type="struct TagItem *"/>
		</method>
		<method name="F_CreatePool" result="APTR">
			<arg name="ItemSize" type="uint32"/>
			<vararg name="tag1" type="Tag"/>
		</method>
		<method name="F_DeletePool" result="void">
			<arg name="feelin_pool" type="APTR"/>
		</method>
		<method name="F_New" result="APTR">
			<arg name="Size" type="uint32"/>
		</method>
		<method name="F_NewP" result="APTR">
			<arg name="feelin_pool" type="APTR"/>
			<arg name="Size" type="uint32"/>
		</method>
		<method name="F_Dispose" result="void">
			<arg name="Mem" type="APTR"/>
		</method>
		<method name="F_DisposeP" result="void">
			<arg name="feelin_pool" type="APTR"/>
			<arg name="Mem" type="APTR"/>
		</method>
		<method name="F_OPool" result="void">
			<arg name="feelin_pool" type="APTR"/>
		</method>
		<method name="F_SPool" result="void">
			<arg name="feelin_pool" type="APTR"/>
		</method>
		<method name="F_RPool" result="void">
			<arg name="feelin_pool" type="APTR"/>
		</method>
		<method name="F_LinkTail" result="APTR">
			<arg name="List" type="FList *"/>
			<arg name="Node" type="FNode *"/>
		</method>
		<method name="F_LinkHead" result="APTR">
			<arg name="List" type="FList *"/>
			<arg name="Node" type="FNode *"/>
		</method>
		<method name="F_LinkInsert" result="APTR">
			<arg name="List" type="FList *"/>
			<arg name="Node" type="FNode *"/>
			<arg name="Prev" type="FNode *"/>
		</method>
		<method name="F_LinkMove" result="APTR">
			<arg name="List" type="FList *"/>
			<arg name="Node" type="FNode *"/>
			<arg name="Prev" type="FNode *"/>
		</method>
		<method name="F_LinkRemove" result="APTR">
			<arg name="List" type="FList *"/>
			<arg name="Node" type="FNode *"/>
		</method>
		<method name="F_LinkMember" result="APTR">
			<arg name="List" type="FList *"/>
			<arg name="Node" type="FNode *"/>
		</method>
		<method name="F_NextNode" result="APTR">
			<arg name="Nodeptrptr" type="APTR *"/>
		</method>
		<method name="F_StrNewA" result="STRPTR">
			<arg name="Len" type="uint32 *"/>
			<arg name="Fmt" type="STRPTR"/>
			<arg name="Params" type="int32 *"/>
		</method>
		<method name="F_StrNew" result="STRPTR">
			<arg name="Len" type="uint32 *"/>
			<arg name="Fmt" type="STRPTR"/>
			<vararg name="tag1" type="Tag"/>
		</method>
		<method name="F_StrFmtA" result="STRPTR">
			<arg name="Buf" type="APTR"/>
			<arg name="Str" type="STRPTR"/>
			<arg name="Params" type="int32 *"/>
		</method>
		<method name="F_StrFmt" result="STRPTR">
			<arg name="Buf" type="APTR"/>
			<arg name="Str" type="STRPTR"/>
			<vararg name="tag1" type="Tag"/>
		</method>
		<method name="F_StrLen" result="uint32">
			<arg name="Str" type="STRPTR"/>
		</method>
		<method name="F_StrCmp" result="int32">
			<arg name="Str1" type="STRPTR"/>
			<arg name="Str2" type="STRPTR"/>
			<arg name="Length" type="uint32"/>
		</method>
		<method name="F_LogA" result="void">
			<arg name="Level" type="uint32"/>
			<arg name="Fmt" type="STRPTR"/>
			<arg name="Params" type="int32 *"/>
		</method>
		<method name="F_Log" result="void">
			<arg name="Level" type="uint32"/>
			<arg name="Fmt" type="STRPTR"/>
			<vararg name="tag1" type="Tag"/>
		</method>
		<method name="F_AlertA" result="void">
			<arg name="Title" type="STRPTR"/>
			<arg name="Body" type="STRPTR"/>
			<arg name="Params" type="int32 *"/>
		</method>
		<method name="F_Alert" result="void">
			<arg name="Title" type="STRPTR"/>
			<arg name="Body" type="STRPTR"/>
			<vararg name="tag1" type="Tag"/>
		</method>
		<method name="F_HashCreate" result="FHashTable *">
			<arg name="Size" type="uint32"/>
		</method>
		<method name="F_HashDelete" result="void">
			<arg name="Table" type="FHashTable *"/>
		</method>
		<method name="F_HashFind" result="FHashLink *">
			<arg name="Table" type="FHashTable *"/>
			<arg name="Key" type="UBYTE *"/>
			<arg name="KeyLenght" type="uint32"/>
			<arg name="HashValuePtr" type="uint32 *"/>
		</method>
		<method name="F_HashAddLink" result="FHashLink *">
			<arg name="Table" type="FHashTable *"/>
			<arg name="Link" type="FHashLink *"/>
		</method>
		<method name="F_HashRemLink" result="int32">
			<arg name="Table" type="FHashTable *"/>
			<arg name="Link" type="FHashLink *"/>
		</method>
		<method name="F_HashAdd" result="FHashLink *">
			<arg name="Table" type="FHashTable *"/>
			<arg name="Key" type="UBYTE *"/>
			<arg name="KeyLength" type="uint32"/>
			<arg name="Data" type="APTR"/>
		</method>
		<method name="F_HashRem" result="int32">
			<arg name="Table" type="FHashTable *"/>
			<arg name="Key" type="UBYTE *"/>
			<arg name="KeyLength" type="uint32"/>
		</method>
		<method name="F_DynamicCreate" result="int32">
			<arg name="feelin_class" type="FClass *"/>
		</method>
		<method name="F_DynamicDelete" result="void">
			<arg name="feelin_class" type="FClass *"/>
		</method>
		<method name="F_DynamicFindAttribute" result="FClassAttribute *">
			<arg name="Name" type="STRPTR"/>
			<arg name="FromClass" type="FClass *"/>
			<arg name="RealClassPtr" type="FClass **"/>
		</method>
		<method name="F_DynamicFindMethod" result="FClassMethod *">
			<arg name="Name" type="STRPTR"/>
			<arg name="FromClass" type="FClass *"/>
			<arg name="RealClassPtr" type="FClass **"/>
		</method>
		<method name="F_DynamicFindID" result="uint32">
			<arg name="Name" type="STRPTR"/>
		</method>
		<method name="F_DynamicResolveTable" result="void">
			<arg name="Entries" type="FDynamicEntry *"/>
		</method>
		<method name="F_DynamicAddAutoTable" result="int32">
			<arg name="Table" type="FDynamicEntry *"/>
		</method>
		<method name="F_DynamicRemAutoTable" result="void">
			<arg name="Table" type="FDynamicEntry *"/>
		</method>
		<method name="F_DynamicNTI" result="struct TagItem *">
			<arg name="TagListptr" type="struct TagItem **"/>
			<arg name="Item" type="struct TagItem *"/>
			<arg name="feelin_class" type="FClass *"/>
		</method>
		<method name="F_DynamicFTI" result="struct TagItem *">
			<arg name="Tag" type="uint32"/>
			<arg name="Tagl" type="struct TagItem *"/>
		</method>
		<method name="F_DynamicGTD" result="uint32">
			<arg name="Tag" type="uint32"/>
			<arg name="Default" type="uint32"/>
			<arg name="Tagl" type="struct TagItem *"/>
		</method>
		<method name="F_FindClass" result="FClass *">
			<arg name="Name" type="STRPTR"/>
		</method>
		<method name="F_OpenClass" result="FClass *">
			<arg name="Name" type="STRPTR"/>
		</method>
		<method name="F_CloseClass" result="void">
			<arg name="feelin_class" type="FClass *"/>
		</method>
		<method name="F_CreateClassA" result="FClass *">
			<arg name="Name" type="STRPTR"/>
			<arg name="Tagl" type="struct TagItem *"/>
		</method>
		<method name="F_CreateClass" result="FClass *">
			<arg name="Name" type="STRPTR"/>
			<vararg name="tag1" type="Tag"/>
		</method>
		<method name="F_DeleteClass" result="void">
			<arg name="feelin_class" type="FClass *"/>
		</method>
		<method name="F_DoA" result="uint32">
			<arg name="Obj" type="FObject"/>
			<arg name="Method,APTR Msg" type="uint32"/>
		</method>
		<method name="F_Do" result="uint32">
			<arg name="Obj" type="FObject"/>
			<arg name="Method" type="uint32"/>
			<vararg name="tag1" type="Tag"/>
		</method>
		<method name="F_ClassDoA" result="uint32">
			<arg name="feelin_class" type="FClass *"/>
			<arg name="Obj" type="FObject"/>
			<arg name="Method" type="uint32"/>
			<arg name="Msg" type="APTR"/>
		</method>
		<method name="F_ClassDo" result="uint32">
			<arg name="feelin_class" type="FClass *"/>
			<arg name="Obj" type="FObject"/>
			<arg name="Method" type="uint32"/>
			<vararg name="tag1" type="Tag"/>
		</method>
		<method name="F_SuperDoA" result="uint32">
			<arg name="feelin_class" type="FClass *"/>
			<arg name="Obj" type="FObject"/>
			<arg name="Method" type="uint32"/>
			<arg name="Msg" type="APTR"/>
		</method>
		<method name="F_SuperDo" result="uint32">
			<arg name="feelin_class" type="FClass *"/>
			<arg name="Obj" type="FObject"/>
			<arg name="Method" type="uint32"/>
			<vararg name="tag1" type="Tag"/>
		</method>
		<method name="F_NewObjA" result="FObject">
			<arg name="Name" type="STRPTR"/>
			<arg name="Tagl" type="struct TagItem *"/>
		</method>
		<method name="F_NewObj" result="FObject">
			<arg name="Name" type="STRPTR"/>
			<vararg name="tag1" type="Tag"/>
		</method>
		<method name="F_MakeObjA" result="FObject">
			<arg name="Type" type="uint32"/>
			<arg name="Params" type="uint32 *"/>
		</method>
		<method name="F_MakeObj" result="FObject">
			<arg name="Type" type="uint32"/>
			<vararg name="tag1" type="Tag"/>
		</method>
		<method name="F_DisposeObj" result="void">
			<arg name="Obj" type="FObject"/>
		</method>
		<method name="F_Get" result="uint32">
			<arg name="Obj" type="FObject"/>
			<arg name="Attribute" type="uint32"/>
		</method>
		<method name="F_Set" result="void">
			<arg name="Obj" type="FObject"/>
			<arg name="Attribute" type="uint32"/>
			<arg name="Value" type="uint32"/>
		</method>
		<method name="F_Draw" result="void">
			<arg name="Obj" type="FObject"/>
			<arg name="Flags" type="uint32"/>
		</method>
		<method name="F_Layout" result="void">
			<arg name="Obj" type="FObject"/>
			<arg name="X" type="WORD"/>
			<arg name="Y" type="WORD"/>
			<arg name="W" type="UWORD"/>
			<arg name="H" type="UWORD"/>
			<arg name="Flags" type="uint32"/>
		</method>
		<method name="F_Erase" result="void">
			<arg name="Obj" type="FObject"/>
			<arg name="X1" type="WORD"/>
			<arg name="Y1" type="WORD"/>
			<arg name="X2" type="WORD"/>
			<arg name="Y2" type="WORD"/>
			<arg name="Flags" type="uint32"/>
		</method>
		<method name="F_SharedFind" result="FObject">
			<arg name="Name" type="STRPTR"/>
		</method>
		<method name="F_SharedCreate" result="FObject">
			<arg name="Object" type="FObject"/>
			<arg name="Name" type="STRPTR"/>
		</method>
		<method name="F_SharedDelete" result="void">
			<arg name="Shared" type="FObject"/>
		</method>
		<method name="F_SharedOpen" result="FObject">
			<arg name="Name" type="STRPTR"/>
		</method>
		<method name="F_SharedClose" result="void">
			<arg name="Shared" type="FObject"/>
		</method>
		<method name="F_StrNewPA" result="STRPTR">
			<arg name="Pool" type="APTR"/>
			<arg name="Len" type="uint32*"/>
			<arg name="Fmt" type="STRPTR"/>
			<arg name="Params" type="int32*"/>
		</method>
		<method name="F_StrNewP" result="STRPTR">
			<arg name="Pool" type="APTR"/>
			<arg name="Len" type="uint32*"/>
			<arg name="Fmt" type="STRPTR"/>
		</method>
	</interface>
</library>
